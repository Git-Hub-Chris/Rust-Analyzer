expr = TupleExpr(expr* exprs)
        | ArrayExpr(expr* exprs)
        | ParenExpr(expr?)
        | PathExpr(path?)
        | LambdaExpr(paramList?, expr? body)
        | IfExpr(condition?)
        | LoopExpr(blockExpr? loop_body)
        | ForExpr(pat?, expr? iterable, blockExpr? loop_body)
        | WhileExpr(condition?, blockExpr? loop_body)
        | ContinueExpr(continue_kw)
        | BreakExpr(expr?)
        | Label
        | BlockExpr(blockExpr)
        | ReturnExpr(expr?)
        | MatchExpr(expr?, matchArmList?)
        | RecordLit(path?, recordFieldList?)
        | CallExpr(expr?, argList?)
        | IndexExpr
        | MethodCallExpr(expr?, nameRef?, typeArgList?, argList?)
        | FieldExpr(expr?, nameRef?)
        | AwaitExpr(expr?)
        | TryExpr(expr?)
        | TryBlockExpr(blockExpr? body)
        | CastExpr(expr?, typeRef?)
        | RefExpr(expr?)
        | PrefixExpr(expr?)
        | BoxExpr(expr?)
        | RangeExpr
        | BinExpr
        | Literal(literal)
        | MacroCall(tokenTree?, path?, name?, attr* attrs, commentIter doc_comments)

implItem = FnDef(fnDef)
        | TypeAliasDef(typeAliasDef)
        | ConstDef(constDef)
        attributes(attr* attrs)

moduleItem = StructDef(structDef)
        | UnionDef(unionDef)
        | EnumDef(enumDef)
        | FnDef(fnDef)
        | TraitDef(itemList?, visibility?, name?, attr* attrs, commentIter doc_comments, typeParamList?, whereClause?, typeBoundList?)
        | TypeAliasDef(typeAliasDef)
        | ImplBlock(itemList?, typeParamList?, whereClause?, attr* attrs)
        | UseItem(useTree?, attr* attrs)
        | ExternCrateItem(nameRef?, alias?, attr* attrs)
        | ConstDef(constDef)
        | StaticDef(expr? body, visibility?, name?, typeParamList?, whereClause?, attr* attrs, commentIter doc_comments, typeRef? ascribed_type)
        | Module(itemList?, visibility?, name?, attr* attrs, commentIter doc_comments)
        attributes(attr* attrs)

nominalDef = StructDef(structDef)
        | UnionDef(unionDef)
        | EnumDef(enumDef)
        attributes(name?, typeParamList?, whereClause?, attr* attrs)

blockExpr = (block?)
structDef = (visibility?, name?, typeParamList?, whereClause?, attr* attrs, commentIter doc_comments)
unionDef = (visibility?, name?, typeParamList?, whereClause?, attr* attrs, recordFieldDefList?, commentIter doc_comments)
enumDef = (enumVariantList? variant_list, visibility?, name?, typeParamList?, whereClause?, attr* attrs, commentIter doc_comments)
fnDef = (paramList?, blockExpr? body, retType?, visibility?, name?, typeParamList?, whereClause?, attr* attrs, commentIter doc_comments)
typeAliasDef = (typeRef?, visibility?, name?, typeParamList?, whereClause?, attr* attrs, commentIter doc_comments, typeBoundList?)
constDef = (expr? body, visibility?, name?, typeParamList?, whereClause?, attr* attrs, commentIter doc_comments, typeRef? ascribed_type)

pat = RefPat(pat?)
        | BoxPat(pat?)
        | BindPat(pat?, name?)
        | PlaceholderPat
        | DotDotPat
        | PathPat(path?)
        | RecordPat(recordFieldPatList?, path?)
        | TupleStructPat(pat* args, path?)
        | TuplePat(pat* args)
        | SlicePat
        | RangePat
        | LiteralPat(literal?)

stmt = ExprStmt(expr? expr)
        | LetStmt(pat? pat, expr? initializer, typeRef? ascribed_type)

typeRef = ParenType(typeRef?)
        | TupleType(l_paren, typeRef* fields, r_paren)
        | NeverType
        | PathType(pathType)
        | PointerType(typeRef?)
        | ArrayType(typeRef?, expr?)
        | SliceType(typeRef?)
        | ReferenceType(typeRef?)
        | PlaceholderType
        | FnPointerType(paramList?, retType?)
        | ForType(typeRef?)
        | ImplTraitType(typeBoundList?)
        | DynTraitType(typeBoundList?)

attrInput = Literal(literal)
        | TokenTree(tokenTree)

literal = ()
alias = (name?)
argList = (expr* args)
assocTypeArg = (nameRef?, typeRef?)
attr = (path?, attrInput? input)
block = (stmt* statements, expr?, attr* attrs)
condition = (pat?, expr?)
enumVariant = (expr?, name?, commentIter doc_comments, attr* attrs)
enumVariantList = (enumVariant* variants)
recordFieldPat = (pat?, name?)
recordFieldPatList = (recordFieldPat* record_field_pats, bindPat* bind_pats)
itemList = (implItem* impl_items, fnDef* functions, moduleItem* items)
lifetimeArg = ()
lifetimeParam = (attr* attrs)
macroItems = (moduleItem* items, fnDef* functions)
macroStmts = (stmt* statements, expr?)
matchArm = (pat* pats, matchGuard? guard, expr?, attr* attrs)
matchArmList = (matchArm* arms, attr* attrs)
matchGuard = (expr?)
name = ()
nameRef = ()
recordField = (nameRef?, expr?)
recordFieldDef = (visibility?, name?, colon, attr* attrs, commentIter doc_comments, typeRef? ascribed_type)
recordFieldDefList = (l_curly, recordFieldDef* fields, comma*, r_curly)
recordFieldList = (l_curly, recordField* fields, expr? spread, r_curly)
param = (pat?, typeRef? ascribed_type, attr* attrs)
paramList = (param* params, selfParam?)
pathType = (path?)
path = (pathSegment? segment, path? qualifier)
pathSegment = (nameRef?, typeArgList?, paramList?, retType?, pathType?)
tupleFieldDef = (typeRef?, visibility?, attr* attrs)
tupleFieldDefList = (tupleFieldDef* fields)
retType = (typeRef?)
selfParam = (typeRef? ascribed_type, attr* attrs)
sourceFile = (module* modules, moduleItem* items, fnDef* functions)
tokenTree = ()
typeArg = (typeRef?)
typeArgList = (typeArg* type_args, lifetimeArg* lifetime_args, assocTypeArg* assoc_type_args)
typeBound = (typeRef?)
typeBoundList = (typeBound* bounds)
typeParam = (name?, attr* attrs, typeBoundList?, typeRef? default_type)
typeParamList = (typeParam* type_params, lifetimeParam* lifetime_params)
useTree = (path?, useTreeList?, alias?)
useTreeList = (useTree* use_trees)
visibility = ()
whereClause = (wherePred* predicates)
wherePred = (typeRef?, typeBoundList?)

argListOwner  = (argList?)
typeAscriptionOwner  = (typeRef? ascribed_type)
typeParamsOwner  = (typeParamList?, whereClause?)
nameOwner  = (name?)
defaultTypeParamOwner  = (pathType? default_type)
visibilityOwner  = (visibility?)
typeBoundsOwner  = (typeBoundList?)
fnDefOwner  = (fnDef* functions)
docCommentsOwner  = (commentIter doc_comments)
loopBodyOwner  = (blockExpr? loop_body)
attrsOwner  = (attr* attrs)
moduleItemOwner  = (moduleItem* items)